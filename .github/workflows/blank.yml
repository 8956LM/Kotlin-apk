name: Build Kivy APK

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install buildozer cython

      - name: Setup Android SDK with License Acceptance
        uses: android-actions/setup-android@v2
        with:
          packages: |
            build-tools;30.0.3
            platforms;android-30
            platform-tools
          license-accept: true

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: $ANDROID_HOME
          key: ${{ runner.os }}-android-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: Generate buildozer.spec dynamically
        run: |
          echo "Creating default buildozer.spec dynamically"
          
          # 创建基本的 buildozer.spec 内容
          cat > buildozer.spec << EOF
          - name: Generate buildozer.spec dynamically
          - name: Generate buildozer.spec dynamically
            run: |
              echo "Creating default buildozer.spec dynamically"
              # 创建基本的 buildozer.spec 内容
              cat > buildozer.spec << 'EOF'
              [app]
              title = Your App Title
              package.name = your_app_name
              package.domain = com.yourdomain
              version = 1.0.0
              source.dir = .
              source.include_exts = py,png,jpg,kv,atlas,ttf
              requirements = python3,kivy,pillow
              android.permissions = INTERNET,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE,CAMERA
              android.api = 33
              android.minapi = 23
              android.sdk = 33
              android.ndk = 25c
              android.arch = armeabi-v7a
              orientation = portrait
              fullscreen = 0
          EOF
          # 打印配置用于调试
          cat buildozer.spec



      - name: Manually Accept SDK Licenses
        run: |
          # 创建许可证目录并写入接受文件
          mkdir -p $ANDROID_HOME/licenses
          echo -e "\n8933bad161af4178b1185d1a37fbf41ea5269c8" > $ANDROID_HOME/licenses/android-sdk-license
          echo -e "\n84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
          echo -e "\nd56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_HOME/licenses/intel-android-extra-license
          # 验证许可证文件存在
          ls -la $ANDROID_HOME/licenses

      - name: Install Required Build Tools
        run: |
          # 确认 SDK 路径
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "PATH: $PATH"
          
          # 安装指定版本的 build-tools
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
          
          # 验证 build-tools 已安装
          ls -la $ANDROID_HOME/build-tools/30.0.3
          
          # 验证 aidl 工具存在
          $ANDROID_HOME/build-tools/30.0.3/aidl --version

      - name: Build APK
        run: |
          # 强制指定 SDK 路径（确保 Buildozer 使用正确的 SDK）
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          
          # 验证环境变量
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "ANDROID_SDK_ROOT: $ANDROID_SDK_ROOT"
          
          # 构建 APK
          buildozer -v android debug
          mkdir artifacts
          cp bin/*.apk artifacts/

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: artifacts/
