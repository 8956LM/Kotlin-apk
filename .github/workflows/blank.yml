name: Build Kivy APK with AIDL Debugging

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: ./repo

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Validate project files
        run: |
          echo "::group::Checking project files"
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          if [ -d "./repo" ]; then
            echo "Repository checked out to ./repo"
            cd ./repo
            echo "Contents of repository:"
            ls -la

          if [ -f "requirements.txt" ]; then
            echo "requirements.txt found"
            cat requirements.txt
          else
            echo "::warning::requirements.txt not found in repository root"
            echo "Creating minimal requirements.txt for buildozer"
            cat > requirements.txt << EOF
          buildozer
          cython
          kivy
          pillow
          EOF
            echo "Created minimal requirements.txt"
          fi
            
        
            if [ -f "buildozer.spec" ]; then
              echo "buildozer.spec found"
            else
              echo "::warning::buildozer.spec not found in repository root"
            fi
          else
            echo "::error::Repository not checked out to ./repo"
            exit 1
          fi
          echo "::endgroup::"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            **/__pycache__
          key: ${{ runner.os }}-pip-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          cd ./repo
          python -m pip install --upgrade pip
          python -m pip install buildozer cython
          echo "::endgroup::"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v2
        with:
          packages: |
            build-tools;30.0.3
            platforms;android-30
            platform-tools
            tools
            ndk;25.2.9519653
          license-accept: true

      - name: Validate ANDROID_HOME environment variable
        run: |
          echo "::group::Validating ANDROID_HOME environment variable"
          echo "Expected ANDROID_HOME path: /usr/local/lib/android/sdk"
          echo "Actual ANDROID_HOME path: $ANDROID_HOME"
          if [ "$ANDROID_HOME" != "/usr/local/lib/android/sdk" ]; then
            echo "::warning::ANDROID_HOME may be misconfigured"
          fi
          echo "::endgroup::"

      - name: Re-install build-tools;30.0.3
        run: |
          echo "::group::Re-installing build-tools;30.0.3"
          echo "sdkmanager version:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
          
          echo "Checking existing build tools:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep build-tools
          
          echo "Installing build-tools;30.0.3"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3"
          
          echo "Verifying installation:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep build-tools
          echo "::endgroup::"

      - name: List installed Android components
        run: |
          echo "::group::Installed Android components"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          echo "::endgroup::"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            $ANDROID_HOME
            $ANDROID_HOME/cmdline-tools
          key: ${{ runner.os }}-android-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: Generate buildozer.spec (with AIDL support)
        run: |
          echo "::group::Generating buildozer.spec"
          cd ./repo
          echo "Creating default buildozer.spec dynamically"
          
          cat > buildozer.spec << 'EOF'
            [app]
            title = Your App Title
            package.name = your.app.name
            package.domain = com.yourdomain
            version = 1.0.0
            source.dir = .
            source.include_exts = py,png,jpg,kv,atlas,ttf,aidl
            requirements = python3,kivy,pillow
            android.permissions = INTERNET,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE,CAMERA
            android.api = 33
            android.minapi = 23
            android.sdk = 33
            android.ndk = 25c
            android.arch = armeabi-v7a
            orientation = portrait
            fullscreen = 0
            android.aidl_include_dirs = src/main/aidl
            android.logcat_filters = *:S python:D
            android.gradle_dependencies = com.android.support:support-v4:27.1.1
          EOF
          
          cat buildozer.spec
          echo "::endgroup::"

      - name: Validate Android SDK environment
        run: |
          echo "::group::Validating Android SDK environment"
          cd ./repo
          echo "=== ANDROID ENVIRONMENT CHECK ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "SDK Tools Version:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
          echo "Build Tools Path:"
          ls -ld $ANDROID_HOME/build-tools/30.0.3 || {
            echo "::error::Build tools 30.0.3 not found after reinstallation"
            exit 1
          }
          echo "AIDL Tool Path:"
          ls -l $ANDROID_HOME/build-tools/30.0.3/aidl || {
            echo "::error::AIDL tool not found in build tools 30.0.3"
            exit 1
          }
          echo "::endgroup::"

      - name: List project files (for debugging)
        run: |
          echo "::group::Listing project files"
          cd ./repo
          echo "=== PROJECT FILE STRUCTURE ==="
          ls -laR .
          echo "=== AIDL FILES FOUND ==="
          find . -type f -name "*.aidl"
          echo "::endgroup::"

      - name: Accept SDK licenses (debug version)
        run: |
          echo "::group::Accepting SDK licenses"
          cd ./repo
          yes | $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          echo "::endgroup::"

      - name: Test AIDL tool with minimal parameters
        run: |
          echo "::group::Testing AIDL compiler"
          cd ./repo
          echo "=== TESTING AIDL COMPILER ==="
          AIDL_FILE_PATH="src/main/aidl/com/example/MyService.aidl"
          
          if [ -f "$AIDL_FILE_PATH" ]; then
            echo "Compiling AIDL file: $AIDL_FILE_PATH"
            $ANDROID_HOME/build-tools/30.0.3/aidl \
              --out src/main/java \
              --header_out src/main/cpp \
              "$AIDL_FILE_PATH" || {
              echo "::error::AIDL compilation failed"
              exit 1
            }
            echo "AIDL compilation successful"
          else
            echo "WARNING: AIDL file not found at $AIDL_FILE_PATH"
            echo "Creating sample AIDL file for testing"
            mkdir -p src/main/aidl/com/example
            cat > "$AIDL_FILE_PATH" << 'EOF'
              package com.example;
              interface MyService {
                void basicTypes(int anInt, long aLong, boolean aBoolean);
              }
            EOF
            echo "Sample AIDL file created"
          fi
          echo "::endgroup::"

      - name: Build APK (with debug logs)
        run: |
          echo "::group::Building APK"
          cd ./repo
          echo "=== STARTING APK BUILD ==="
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export BUILDOZER_DEBUG=1
          
          buildozer android debug --print_config_only
          
          buildozer -v android debug || { 
            echo "::error::APK build failed"
            cat bin/buildozer.log
            exit 1
          }
          
          if [ -f bin/*.apk ]; then
            echo "APK successfully built"
            mkdir -p artifacts
            cp bin/*.apk artifacts/
          else
            echo "::error::No APK found after build"
            exit 1
          fi
          echo "::endgroup::"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: ./repo/artifacts/
          retention-days: 7
