name: Build Android APK with Kivy

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install buildozer

      - name: Patch Python for Android
        run: |
          set -e  # 确保任何命令失败都会导致脚本退出
          
          # 克隆 Python for Android 仓库
          echo "Cloning Python for Android repository..."
          git clone https://github.com/kivy/python-for-android.git ~/.buildozer/android/platform/python-for-android
          
          # 可选：切换到特定版本以确保兼容性
          cd ~/.buildozer/android/platform/python-for-android
          git checkout master  # 或指定特定版本的标签
          
          # 查找 NDK 版本定义文件
          echo "Searching for NDK version definition..."
          find_result=$(find ~/.buildozer/android/platform/python-for-android -name "download.py" -o -name "ndk.py" -o -name "versions.py" -o -name "toolchain.py")
          
          if [ -z "$find_result" ]; then
            echo "❌ ERROR: Could not find NDK version definition files"
            exit 1
          else
            echo "✅ Found files:"
            echo "$find_result"
          fi
          
          # 查找实际包含 NDK 版本定义的文件
          echo "Searching for NDK version definition in files..."
          ndk_files=$(grep -rl "DEFAULT_NDK_VERSION\|NDK_VERSION" ~/.buildozer/android/platform/python-for-android || true)
          
          if [ -z "$ndk_files" ]; then
            echo "⚠️ WARNING: Could not find NDK version definition in any file. Trying alternative patterns..."
            
            # 尝试更多版本定义模式
            ndk_files=$(grep -rl "ndk_version\|default_ndk_version\|NDK_REVISION" ~/.buildozer/android/platform/python-for-android || true)
            
            if [ -z "$ndk_files" ]; then
              echo "❌ ERROR: Could not find NDK version definition in any file"
              exit 1
            else
              echo "✅ Found alternative NDK version definition in:"
              echo "$ndk_files"
            fi
          else
            echo "✅ Found NDK version definition in:"
            echo "$ndk_files"
          fi
          
          # 验证文件是否存在
          file_exists=false
          for file in $ndk_files; do
            if [ -f "$file" ]; then
              file_exists=true
              echo "✅ File exists: $file"
            else
              echo "⚠️ WARNING: File does not exist: $file"
            fi
          done
          
          if [ "$file_exists" = false ]; then
            echo "❌ ERROR: None of the found files exist"
            exit 1
          fi
          
          # 循环处理每个文件
          echo "Patching NDK version in files..."
          patch_success=false
          
          # 尝试多种可能的替换模式
          patterns=(
            "s/DEFAULT_NDK_VERSION = \"25b\"/DEFAULT_NDK_VERSION = \"26b\"/g"
            "s/NDK_VERSION = \"25b\"/NDK_VERSION = \"26b\"/g"
            "s/ndk_version = \"25b\"/ndk_version = \"26b\"/g"
            "s/DEFAULT_NDK_VERSION='25b'/DEFAULT_NDK_VERSION='26b'/g"
            "s/NDK_VERSION='25b'/NDK_VERSION='26b'/g"
            "s/ndk_version='25b'/ndk_version='26b'/g"
          )
          
          for file in $ndk_files; do
            if [ -f "$file" ] && [ -w "$file" ]; then
              echo "  - Processing file: $file"
              
              # 尝试每种替换模式
              for pattern in "${patterns[@]}"; do
                echo "    - Trying pattern: $pattern"
                sed -i "$pattern" "$file"
                if grep -q "26b" "$file"; then
                  echo "    ✅ Successfully patched $file"
                  patch_success=true
                  break
                else
                  echo "    ❌ Pattern did not match in $file"
                fi
              done
            else
              echo "  ❌ Skipping file (not found or not writable): $file"
            fi
          done
          
          if [ "$patch_success" = false ]; then
            echo "❌ ERROR: Failed to patch any files"
            exit 1
          fi
          
          # 验证修改
          echo "Verifying modification..."
          grep_result=$(grep -r "26b" ~/.buildozer/android/platform/python-for-android || true)
          
          if [ -z "$grep_result" ]; then
            echo "❌ ERROR: Failed to verify modification"
            exit 1
          else
            echo "✅ NDK version successfully updated to 26b:"
            echo "$grep_result"
          fi
          
          # 检查目录权限
          echo "Checking directory permissions:"
          ls -la ~/.buildozer/android/platform/python-for-android
          
          # 验证 p4a 可执行文件
          echo "Checking p4a executable:"
          if [ -f ~/.buildozer/android/platform/python-for-android/pythonforandroid/toolchain.py ]; then
            echo "✅ p4a toolchain.py found"
          else
            echo "❌ ERROR: p4a toolchain.py not found"
            exit 1
          fi
          
          echo "✅ Python for Android successfully patched!"

      - name: Build APK
        run: |
          # 这里添加您的 APK 构建命令
          echo "Building APK..."
          # buildozer android debug
