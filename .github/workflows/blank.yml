name: Build Kivy APK with AIDL Debugging

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: ./repo

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Validate project files
        run: |
          echo "::group::Checking project files"
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          if [ -d "./repo" ]; then
            echo "Repository checked out to ./repo"
            cd ./repo
            echo "Contents of repository:"
            ls -la
            
            if [ -f "requirements.txt" ]; then
              echo "requirements.txt found"
              cat requirements.txt
            else
              echo "::warning::requirements.txt not found in repository root"
              echo "Creating minimal requirements.txt for buildozer"
              cat > requirements.txt << EOF
          buildozer
          cython
          kivy
          pillow
          EOF
              echo "Created minimal requirements.txt"
            fi
            
            if [ -f "buildozer.spec" ]; then
              echo "buildozer.spec found"
            else
              echo "::warning::buildozer.spec not found in repository root"
            fi
          else
            echo "::error::Repository not checked out to ./repo"
            exit 1
          fi
          echo "::endgroup::"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            **/__pycache__
          key: ${{ runner.os }}-pip-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          cd ./repo
          python -m pip install --upgrade pip
          python -m pip install buildozer cython
          echo "::endgroup::"

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          components: |
            platforms;android-30
            platform-tools
            cmdline-tools;latest
            tools
            ndk;25.2.9519653
          accept-licenses: true

      - name: Force accept all Android SDK licenses
        run: |
          echo "::group::Force accepting all Android SDK licenses"
          mkdir -p $ANDROID_HOME/licenses
          echo "24333f8a63b6825ea9c5514f83c2829b004d1e9" > $ANDROID_HOME/licenses/android-sdk-license
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_HOME/licenses/android-sdk-preview-license
          echo "d56f5187479451eabf01fb78af6dfcb131a6481e" > $ANDROID_HOME/licenses/intel-android-extra-license
          
          # 额外接受Build-Tools 36.0.0的许可证
          echo "8933bad161af4178b1185d1a37fbf41ea5269c5" > $ANDROID_HOME/licenses/android-sdk-license
          
          # 验证许可证是否正确设置
          echo "Verifying license acceptance:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --licenses || true
          
          # 安装可能缺少的组件
          echo "Installing additional Android SDK components..."
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager "build-tools;30.0.3" "platforms;android-30"
          echo "::endgroup::"

      - name: Validate ANDROID_HOME environment variable
        run: |
          echo "::group::Validating ANDROID_HOME environment variable"
          echo "Expected ANDROID_HOME path: $ANDROID_HOME"
          echo "Actual ANDROID_HOME path: $ANDROID_HOME"
          if [ -z "$ANDROID_HOME" ]; then
            echo "::error::ANDROID_HOME environment variable is not set"
            exit 1
          fi
          echo "::endgroup::"

      - name: List available Android SDK components
        run: |
          echo "::group::Available Android SDK components"
          echo "SDK Manager version:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
          
          echo "Available build tools:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep build-tools
          
          echo "Available platforms:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list | grep platforms
          
          echo "SDK directory structure:"
          ls -laR $ANDROID_HOME
          echo "::endgroup::"

      - name: Manually download and install Build-Tools 30.0.3
        run: |
          echo "::group::Manually installing Build-Tools 30.0.3"
          # 创建临时目录
          mkdir -p temp-build-tools
          cd temp-build-tools
          
          # 下载Build-Tools 30.0.3压缩包
          echo "Downloading Build-Tools 30.0.3..."
          wget -q https://dl.google.com/android/repository/build-tools_r30.0.3-linux.zip -O build-tools.zip
          
          # 验证下载文件
          echo "Verifying downloaded file..."
          ls -la build-tools.zip
          
          # 创建目标目录
          mkdir -p $ANDROID_HOME/build-tools/30.0.3
          
          # 解压到临时目录
          echo "Extracting Build-Tools 30.0.3..."
          unzip -q build-tools.zip
          
          # 验证解压内容
          echo "Contents of extracted files:"
          ls -la
          
          # 检查是否存在android-11子目录
          if [ -d "android-11" ]; then
            echo "Found android-11 subdirectory. Moving contents to root..."
            # 移动android-11目录中的所有文件到父目录
            mv android-11/* $ANDROID_HOME/build-tools/30.0.3/
            
            # 删除空目录
            rmdir android-11
          else
            # 如果没有android-11目录，直接移动所有文件
            mv * $ANDROID_HOME/build-tools/30.0.3/
          fi
          
          # 返回原始目录并清理临时文件
          cd ..
          rm -rf temp-build-tools
          
          # 验证安装
          echo "Verifying installation..."
          ls -la $ANDROID_HOME/build-tools/30.0.3
          
          # 检查AIDL工具是否存在
          if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
            echo "AIDL tool found!"
            $ANDROID_HOME/build-tools/30.0.3/aidl --version || echo "AIDL version check failed"
          else
            echo "::error::AIDL tool not found!"
            echo "Detailed contents of build-tools/30.0.3:"
            find $ANDROID_HOME/build-tools/30.0.3 -type f
            exit 1
          fi
          echo "::endgroup::"

      - name: Create symlink for Buildozer cache
        run: |
          echo "::group::Creating symlink for Buildozer cache"
          # 创建Buildozer期望的目录结构
          mkdir -p /home/runner/.buildozer/android/platform/android-sdk
          ln -s $ANDROID_HOME/build-tools /home/runner/.buildozer/android/platform/android-sdk/build-tools
          ln -s $ANDROID_HOME/platforms /home/runner/.buildozer/android/platform/android-sdk/platforms
          ln -s $ANDROID_HOME/cmdline-tools /home/runner/.buildozer/android/platform/android-sdk/cmdline-tools
          ln -s $ANDROID_HOME/tools /home/runner/.buildozer/android/platform/android-sdk/tools
          
          # 验证链接
          echo "Verifying symlinks:"
          ls -la /home/runner/.buildozer/android/platform/android-sdk
          echo "::endgroup::"

      - name: List installed Android components
        run: |
          echo "::group::Installed Android components"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          echo "::endgroup::"

      - name: Cache Android SDK
        uses: actions/cache@v4
        with:
          path: |
            $ANDROID_HOME
            $ANDROID_HOME/cmdline-tools
          key: ${{ runner.os }}-android-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-android-

      - name: Generate buildozer.spec (with AIDL support)
        run: |
          echo "::group::Generating buildozer.spec"
          cd ./repo
          echo "Creating default buildozer.spec dynamically"
          
          cat > buildozer.spec << 'EOF'
            [app]
            title = Your App Title
            package.name = your.app.name
            package.domain = com.yourdomain
            version = 1.0.0
            source.dir = .
            source.include_exts = py,png,jpg,kv,atlas,ttf,aidl
            requirements = python3,kivy,pillow
            android.permissions = INTERNET,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE,CAMERA
            android.api = 30
            android.minapi = 23
            android.sdk = 30
            android.ndk = 25c
            android.archs = armeabi-v7a
            orientation = portrait
            fullscreen = 0
            android.aidl_include_dirs = src/main/aidl
            android.logcat_filters = *:S python:D
            android.gradle_dependencies = com.android.support:support-v4:27.1.1
            android.sdk_build_tools_version = 30.0.3
            android.skip_update = True  # 防止Buildozer尝试更新SDK
          EOF
          
          cat buildozer.spec
          echo "::endgroup::"

      - name: Validate Android SDK environment
        run: |
          echo "::group::Validating Android SDK environment"
          echo "=== ANDROID ENVIRONMENT CHECK ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "SDK Tools Version:"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
          
          echo "Build Tools Path:"
          if [ -d "$ANDROID_HOME/build-tools/30.0.3" ]; then
            echo "Build tools 30.0.3 found!"
            ls -la $ANDROID_HOME/build-tools/30.0.3
          else
            echo "::error::Build tools 30.0.3 not found"
            echo "Available build tools:"
            ls -la $ANDROID_HOME/build-tools || echo "No build tools directory found"
            exit 1
          fi
          
          echo "AIDL Tool Path:"
          if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
            echo "AIDL tool found!"
            $ANDROID_HOME/build-tools/30.0.3/aidl --version || echo "AIDL version check failed"
          else
            echo "::error::AIDL tool not found in build tools 30.0.3"
            echo "Contents of build-tools/30.0.3:"
            ls -la $ANDROID_HOME/build-tools/30.0.3 || echo "Directory does not exist"
            exit 1
          fi
          
          echo "sdkmanager Path:"
          if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "sdkmanager found!"
            $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --version
          else
            echo "::error::sdkmanager not found"
            echo "Available cmdline-tools:"
            ls -la $ANDROID_HOME/cmdline-tools || echo "No cmdline-tools directory found"
            exit 1
          fi
          echo "::endgroup::"

      - name: List project files (for debugging)
        run: |
          echo "::group::Listing project files"
          cd ./repo
          echo "=== PROJECT FILE STRUCTURE ==="
          ls -laR .
          echo "=== AIDL FILES FOUND ==="
          find . -type f -name "*.aidl"
          echo "::endgroup::"

      - name: Test AIDL tool with minimal parameters
        run: |
          echo "::group::Testing AIDL compiler"
          cd ./repo
          echo "=== TESTING AIDL COMPILER ==="
          AIDL_FILE_PATH="src/main/aidl/com/example/MyService.aidl"
          
          if [ -f "$AIDL_FILE_PATH" ]; then
            echo "Compiling AIDL file: $AIDL_FILE_PATH"
            $ANDROID_HOME/build-tools/30.0.3/aidl \
              --out src/main/java \
              --header_out src/main/cpp \
              "$AIDL_FILE_PATH" || {
              echo "::error::AIDL compilation failed"
              exit 1
            }
            echo "AIDL compilation successful"
          else
            echo "WARNING: AIDL file not found at $AIDL_FILE_PATH"
            echo "Creating sample AIDL file for testing"
            mkdir -p src/main/aidl/com/example
            
            # 使用 tee 命令替代 heredoc
            echo "package com.example;" > "$AIDL_FILE_PATH"
            echo "interface MyService {" >> "$AIDL_FILE_PATH"
            echo "  void basicTypes(int anInt, long aLong, boolean aBoolean);" >> "$AIDL_FILE_PATH"
            echo "}" >> "$AIDL_FILE_PATH"
            
            echo "Sample AIDL file created"
          fi
          echo "::endgroup::"

      - name: Build APK (with debug logs)
        run: |
          echo "::group::Building APK"
          cd ./repo
          echo "=== STARTING APK BUILD ==="
          # 设置环境变量指向系统安装的SDK
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export ANDROID_HOME=$ANDROID_HOME
          export BUILDOZER_DEBUG=1
          
          # 确保buildozer使用系统SDK
          echo "Using system Android SDK at: $ANDROID_HOME"
          
          # 检查关键SDK组件
          echo "Checking critical SDK components:"
          if [ -f "$ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager" ]; then
            echo "sdkmanager found: $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager"
          else
            echo "::error::sdkmanager not found"
            exit 1
          fi
          
          if [ -f "$ANDROID_HOME/build-tools/30.0.3/aidl" ]; then
            echo "AIDL tool found: $ANDROID_HOME/build-tools/30.0.3/aidl"
          else
            echo "::error::AIDL tool not found"
            exit 1
          fi
          
          # 防止Buildozer尝试下载SDK
          mkdir -p /home/runner/.buildozer/android/platform
          touch /home/runner/.buildozer/android/platform/accept-licenses
          
          buildozer android debug --print_config_only
          
          buildozer -v android debug || { 
            echo "::error::APK build failed"
            cat bin/buildozer.log
            exit 1
          }
          
          if [ -f bin/*.apk ]; then
            echo "APK successfully built"
            mkdir -p artifacts
            cp bin/*.apk artifacts/
          else
            echo "::error::No APK found after build"
            exit 1
          fi
          echo "::endgroup::"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: ./repo/artifacts/
          retention-days: 7
