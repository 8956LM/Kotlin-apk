name: Build Kivy APK with AIDL Debugging

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # 允许手动触发

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
          path: ./repo

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Validate project files
        run: |
          echo "::group::Checking project files"
          echo "Current directory: $(pwd)"
          echo "Contents of current directory:"
          ls -la
          
          if [ -d "./repo" ]; then
            echo "Repository checked out to ./repo"
            cd ./repo
            echo "Contents of repository:"
            ls -la
            
            if [ -f "requirements.txt" ]; then
              echo "requirements.txt found"
              cat requirements.txt
            else
              echo "::warning::requirements.txt not found in repository root"
              echo "Creating minimal requirements.txt for buildozer"
              cat > requirements.txt << EOF
buildozer
cython
kivy
pillow
EOF
              echo "Created minimal requirements.txt"
            fi
            
            if [ -f "buildozer.spec" ]; then
              echo "buildozer.spec found"
            else
              echo "::warning::buildozer.spec not found in repository root"
            fi
          else
            echo "::error::Repository not checked out to ./repo"
            exit 1
          fi
          echo "::endgroup::"

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            **/__pycache__
          key: ${{ runner.os }}-pip-${{ github.run_id }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          echo "::group::Installing dependencies"
          cd ./repo
          python -m pip install --upgrade pip
          python -m pip install buildozer cython
          echo "::endgroup::"

      - name: Setup Android SDK (Google官方操作)
        uses: google/setup-android@v3  # 替换为最新官方操作
        with:
          android_version: 30            # Android 10 (API 30)
          build_tools_version: 30.0.3    # 指定旧版Build-Tools
          licenses: |
            android-sdk-license.*        # 自动接受许可证
          components: |
            platform-tools               # 必选组件
            tools                        # 必选工具
            ndk;25.2.9519653            # 指定NDK版本

      - name: Validate ANDROID_HOME environment variable
        run: |
          echo "::group::Validating ANDROID_HOME environment variable"
          echo "ANDROID_HOME: $ANDROID_HOME"
          if [ -z "$ANDROID_HOME" ]; then
            echo "::error::ANDROID_HOME is not set"
            exit 1
          fi
          echo "::endgroup::"

      - name: List installed Android components
        run: |
          echo "::group::Installed Android components"
          $ANDROID_HOME/cmdline-tools/latest/bin/sdkmanager --list
          echo "::endgroup::"

      - name: Generate buildozer.spec (with AIDL support)
        run: |
          echo "::group::Generating buildozer.spec"
          cd ./repo
          cat > buildozer.spec << 'EOF'
            [app]
            title = Your App Title
            package.name = your.app.name
            package.domain = com.yourdomain
            version = 1.0.0
            source.dir = .
            source.include_exts = py,png,jpg,kv,atlas,ttf,aidl
            requirements = python3,kivy,pillow
            android.permissions = INTERNET,READ_EXTERNAL_STORAGE,WRITE_EXTERNAL_STORAGE,CAMERA
            android.api = 30             # 与SDK版本一致
            android.minapi = 23
            android.sdk = 30             # 与SDK版本一致
            android.ndk = 25c
            android.arch = armeabi-v7a
            orientation = portrait
            fullscreen = 0
            android.aidl_include_dirs = src/main/aidl
            android.logcat_filters = *:S python:D
            android.gradle_dependencies = com.android.support:support-v4:27.1.1
            android.sdk_build_tools_version = 30.0.3  # 明确指定Build-Tools版本
          EOF
          cat buildozer.spec
          echo "::endgroup::"

      - name: Validate Android SDK environment
        run: |
          echo "::group::Validating Android SDK environment"
          echo "=== ANDROID ENVIRONMENT CHECK ==="
          echo "ANDROID_HOME: $ANDROID_HOME"
          echo "Build Tools Path:"
          ls -ld $ANDROID_HOME/build-tools/30.0.3 || {
            echo "::error::Build tools 30.0.3 not found"
            exit 1
          }
          echo "AIDL Tool Path:"
          ls -l $ANDROID_HOME/build-tools/30.0.3/aidl || {
            echo "::error::AIDL tool not found"
            exit 1
          }
          echo "::endgroup::"

      - name: Test AIDL tool with minimal parameters
        run: |
          echo "::group::Testing AIDL compiler"
          cd ./repo
          AIDL_FILE_PATH="src/main/aidl/com/example/MyService.aidl"
          
          if [ ! -f "$AIDL_FILE_PATH" ]; then
            echo "Creating sample AIDL file"
            mkdir -p src/main/aidl/com/example
            echo "package com.example;\ninterface MyService { void basicTypes(int anInt, long aLong, boolean aBoolean); }" > "$AIDL_FILE_PATH"
          fi
          
          echo "Compiling AIDL file: $AIDL_FILE_PATH"
          $ANDROID_HOME/build-tools/30.0.3/aidl \
            --out src/main/java \
            --header_out src/main/cpp \
            "$AIDL_FILE_PATH" || {
            echo "::error::AIDL compilation failed"
            exit 1
          }
          echo "AIDL compilation successful"
          echo "::endgroup::"

      - name: Build APK (with debug logs)
        run: |
          echo "::group::Building APK"
          cd ./repo
          export ANDROID_SDK_ROOT=$ANDROID_HOME
          export BUILDOZER_DEBUG=1
          
          buildozer android debug --print_config_only
          buildozer -v android debug || { 
            echo "::error::APK build failed"
            cat bin/buildozer.log
            exit 1
          }
          
          if [ -f bin/*.apk ]; then
            echo "APK successfully built"
            mkdir -p artifacts
            cp bin/*.apk artifacts/
          else
            echo "::error::No APK found after build"
            exit 1
          }
          echo "::endgroup::"

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: kivy-apk
          path: ./repo/artifacts/
          retention-days: 7
